# from https://github.com/bebebe666/OptimalSteps


import numpy as np
import torch

def loglinear_interp(t_steps, num_steps):
    """
    Performs log-linear interpolation of a given array of decreasing numbers.
    """
    xs = np.linspace(0, 1, len(t_steps))
    ys = np.log(t_steps[::-1])

    new_xs = np.linspace(0, 1, num_steps)
    new_ys = np.interp(new_xs, xs, ys)

    interped_ys = np.exp(new_ys)[::-1].copy()
    return interped_ys


NOISE_LEVELS = {"FLUX": [0.9968, 0.9886, 0.9819, 0.975, 0.966, 0.9471, 0.9158, 0.8287, 0.5512, 0.2808, 0.001],
"Wan":[1.0, 0.997, 0.995, 0.993, 0.991, 0.989, 0.987, 0.985, 0.98, 0.975, 0.973, 0.968, 0.96, 0.946, 0.927, 0.902, 0.864, 0.776, 0.539, 0.208, 0.001],
"Chroma": [0.992, 0.99, 0.988, 0.985, 0.982, 0.978, 0.973, 0.968, 0.961, 0.953, 0.943, 0.931, 0.917, 0.9, 0.881, 0.858, 0.832, 0.802, 0.769, 0.731, 0.69, 0.646, 0.599, 0.55, 0.501, 0.451, 0.402, 0.355, 0.311, 0.27, 0.232, 0.199, 0.169, 0.143, 0.12, 0.101, 0.084, 0.07, 0.058, 0.048, 0.001],
"SmoothChroma": [1.0, 0.9993733167648315, 0.997972309589386, 0.9950279593467712, 0.9898685216903687, 0.9836316108703613, 0.9733033776283264, 0.9615165591239929, 0.9467839002609253, 0.9287289977073669, 0.9092832803726196, 0.884550154209137, 0.8583891987800598, 0.8289399147033691, 0.796101450920105, 0.7624600529670715, 0.7234585285186768, 0.6840143203735352, 0.642135500907898, 0.5980134010314941, 0.5546978712081909, 0.507338285446167, 0.46151280403137207, 0.41529807448387146, 0.36901113390922546, 0.32581475377082825, 0.2811755836009979, 0.24040895700454712, 0.20176975429058075, 0.1654399186372757, 0.1340799778699875, 0.10370016098022461, 0.07850327342748642, 0.05693532153964043, 0.03858375549316406, 0.02527502551674843, 0.013892216607928276, 0.006665528751909733, 0.0024370471946895123, 2.2116898890089942e-06, 0.0],
"SteepChroma": [1.0, 0.9999643564224243, 0.999904990196228, 0.9997267127037048, 0.9993816614151001, 0.998757541179657, 0.9977403879165649, 0.9961360096931458, 0.9937422275543213, 0.9901402592658997, 0.9850819706916809, 0.9781875014305115, 0.9689859747886658, 0.9569108486175537, 0.9414167404174805, 0.9218782782554626, 0.8975358605384827, 0.866929829120636, 0.8299718499183655, 0.7860634922981262, 0.7347679734230042, 0.6762162446975708, 0.610967755317688, 0.5401574969291687, 0.46586063504219055, 0.3895713984966278, 0.31550171971321106, 0.24673202633857727, 0.18608036637306213, 0.13493137061595917, 0.09373507648706436, 0.06221899762749672, 0.03933815658092499, 0.023320240899920464, 0.013008367270231247, 0.006633924786001444, 0.0031193832401186228, 0.0013005577493458986, 0.0006986837252043188, 0.0003443197929300368, 0.0],
"BalancedChroma": [1.0, 0.9998653531074524, 0.9995474815368652, 0.9987751841545105, 0.997288703918457, 0.9951651096343994, 0.991508960723877, 0.9867022037506104, 0.9801243543624878, 0.9712562561035156, 0.9604474306106567, 0.9461167454719543, 0.929171085357666, 0.9086018204689026, 0.8840172290802002, 0.8561182022094727, 0.8226826190948486, 0.7850751876831055, 0.7426279783248901, 0.6953293085098267, 0.6447329521179199, 0.5888218879699707, 0.5310093760490417, 0.47117266058921814, 0.4106564223766327, 0.35211437940597534, 0.2947344183921814, 0.2427959144115448, 0.19612157344818115, 0.15499074757099152, 0.12096787989139557, 0.09094470739364624, 0.06714539229869843, 0.04777521640062332, 0.03206203132867813, 0.020847763866186142, 0.011522193439304829, 0.005579122342169285, 0.002115449868142605, 5.951479761279188e-05, 0.0],
"DropCurveChroma": [1.0, 0.9999643564224243, 0.999904990196228, 0.9997267127037048, 0.9993816614151001, 0.998757541179657, 0.9977403879165649, 0.9961360096931458, 0.9937422275543213, 0.9901402592658997, 0.9850819706916809, 0.9781875014305115, 0.9689859747886658, 0.9569108486175537, 0.9414167404174805, 0.9218782782554626, 0.8975358605384827, 0.866929829120636, 0.8299718499183655, 0.7860634922981262, 0.7347679734230042, 0.6762162446975708, 0.610967755317688, 0.5401574969291687, 0.46586063504219055, 0.3895713984966278, 0.31550171971321106, 0.24673202633857727, 0.20176975429058075, 0.1654399186372757, 0.1340799778699875, 0.10370016098022461, 0.07850327342748642, 0.05693532153964043, 0.03858375549316406, 0.02527502551674843, 0.013892216607928276, 0.006665528751909733, 0.0024370471946895123, 2.2116898890089942e-06, 0.0],
"InverseSquare": [1.0, 0.9995213150978088, 0.9981546998023987, 0.9958130121231079, 0.9925858378410339, 0.9883295297622681, 0.9831554889678955, 0.9768980741500854, 0.969654381275177, 0.9612741470336914, 0.9517567157745361, 0.9410071969032288, 0.9290523529052734, 0.915727972984314, 0.9009934067726135, 0.8847484588623047, 0.8669329881668091, 0.8474221229553223, 0.8260725736618042, 0.8027859926223755, 0.777527391910553, 0.7500502467155457, 0.720307469367981, 0.6881853938102722, 0.6534820795059204, 0.6162790656089783, 0.5762999653816223, 0.5338231921195984, 0.4886397421360016, 0.44122567772865295, 0.3915172517299652, 0.3403010070323944, 0.2881265878677368, 0.23591682314872742, 0.1848505437374115, 0.13659638166427612, 0.0923984944820404, 0.05484257638454437, 0.025672029703855515, 0.006766636390239, 0.0],
"Dipper": [1.0, 0.9999643564224243, 0.999904990196228, 0.9997267127037048, 0.9993816614151001, 0.998757541179657, 0.9977403879165649, 0.9961360096931458, 0.9937422275543213, 0.9901402592658997, 0.9850819706916809, 0.9781875014305115, 0.9689859747886658, 0.9569108486175537, 0.9414167404174805, 0.9218782782554626, 0.8975358605384827, 0.866929829120636, 0.8260725736618042, 0.8027859926223755, 0.777527391910553, 0.7500502467155457, 0.720307469367981, 0.6881853938102722, 0.6534820795059204, 0.6162790656089783, 0.5762999653816223, 0.5338231921195984, 0.4886397421360016, 0.44122567772865295, 0.3915172517299652, 0.3403010070323944, 0.2881265878677368, 0.23591682314872742, 0.1848505437374115, 0.13659638166427612, 0.0923984944820404, 0.05484257638454437, 0.025672029703855515, 0.006766636390239, 0.0],
}

class OptimalStepsScheduler:
    @classmethod
    def INPUT_TYPES(s):
        return {"required":
                    {"model_type": (["FLUX", "Wan", "Chroma", "SmoothChroma", "SteepChroma", "BalancedChroma", "DropCurveChroma", "InverseSquare", "Dipper"], ),
                     "steps": ("INT", {"default": 20, "min": 3, "max": 1000}),
                     "denoise": ("FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}),
                      }
               }
    RETURN_TYPES = ("SIGMAS",)
    CATEGORY = "sampling/custom_sampling/schedulers"

    FUNCTION = "get_sigmas"

    def get_sigmas(self, model_type, steps, denoise):
        total_steps = steps
        if denoise < 1.0:
            if denoise <= 0.0:
                return (torch.FloatTensor([]),)
            total_steps = round(steps * denoise)

        sigmas = NOISE_LEVELS[model_type][:]
        if (steps + 1) != len(sigmas):
            sigmas = loglinear_interp(sigmas, steps + 1)

        sigmas = sigmas[-(total_steps + 1):]
        sigmas[-1] = 0
        return (torch.FloatTensor(sigmas), )

NODE_CLASS_MAPPINGS = {
    "OptimalStepsScheduler": OptimalStepsScheduler,
}
